// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиНоменклатуру(УзелНоменклатуры) Экспорт
	
	НоменклатураГУИД = "";
	Если УзелНоменклатуры.Свойство("Ref", НоменклатураГУИД) Тогда
		Возврат Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(НоменклатураГУИД));
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции


//#Область ВидыЦен

//// ищет элемент при импорте - по узлу json-текста
//Функция НайтиВидЦены(Узел, ВнешняяСистема) Экспорт

//	Рез = Неопределено;
//	ГУИД = "";
//	Если узел.Свойство("Ref", ГУИД) Тогда
//		Рез = НайтиВидЦеныПоГУИД(ГУИД, ВнешняяСистема);
//	КонецЕсли;
//	Возврат Рез;
//	
//КонецФункции

//// ищет элемент по ГУИД в мэппинге, если там нет - в справочнике
//Функция НайтиВидЦеныПоГУИД(ГУИД, ВнешняяСистема) Экспорт
//	
//	Если НЕ ЗначениеЗаполнено(ГУИД) Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Рез = РегистрыСведений.ксп_МэппингСправочникТипыЦенНоменклатуры.ПоМэппингу(ГУИД, ВнешняяСистема);
//	
//	Если НЕ ЗначениеЗаполнено(Рез) ИЛИ НЕ ЗначениеЗаполнено(Рез.ВерсияДанных) Тогда
//		Рез = Справочники.ТипыЦенНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
//	КонецЕсли;
//	
//	Возврат Рез;
//	
//КонецФункции

//#КонецОбласти

//// Описание_метода
////
//// Параметры:
////	Параметр1 	- Тип1 - 
////
//// Возвращаемое значение:
////	Тип: Тип_значения
////
//Функция НайтиВалюту(УзелВалюты) Экспорт
//	
//	ВалютаКод = "";
//	Если УзелВалюты.Свойство("currencyCode", ВалютаКод) Тогда
//		Возврат Справочники.Валюты.НайтиПоКоду(ВалютаКод);
//	КонецЕсли;
//		
//	Возврат Неопределено;

//КонецФункции

//// Описание_метода
////
//// Параметры:
////	Параметр1 	- Тип1 - 
////
//// Возвращаемое значение:
////	Тип: Тип_значения
////
//Функция НайтиПроект(УзелПроект) Экспорт
//	
//	ПроектГУИД = "";
//	Если УзелПроект.Свойство("Ref", ПроектГУИД) Тогда
//		Возврат Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(ПроектГУИД));
//	КонецЕсли;
//		
//	Возврат Неопределено;


//КонецФункции

//// Описание_метода
////
//// Параметры:
////	Параметр1 	- Тип1 - 
////
//// Возвращаемое значение:
////	Тип: Тип_значения
////
//Функция НайтиПодразделение(УзелПодразделение) Экспорт
//	
//	ПодразделениеГУИД = "";
//	Если УзелПодразделение.Свойство("Ref", ПодразделениеГУИД) Тогда
//		Возврат Справочники.Подразделения.ПолучитьСсылку(Новый УникальныйИдентификатор(ПодразделениеГУИД));
//	КонецЕсли;
//		
//	Возврат Неопределено;


//КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиБанковскийСчетОрганизации(НомерСчета, БИК) Экспорт
		
	Банк = НайтиБанк(БИК);
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.НомерСчета = &НомерСчета
		|	И БанковскиеСчета.Банк = &Банк";
	
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиБанковскийСчетКонтрагента(НомерСчета, БИК) Экспорт
		
	Банк = НайтиБанк(БИК);
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.НомерСчета = &НомерСчета
		|	И БанковскиеСчета.Банк = &Банк";
	
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиБанк(БИК) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторБанков.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КлассификаторБанков КАК КлассификаторБанков
		|ГДЕ
		|	КлассификаторБанков.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", БИК);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиДисконтнуюКарту(Штрихкод, МагнитныйКод) Экспорт

	Если ЗначениеЗаполнено(МагнитныйКод) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИнформационныеКарты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
			|ГДЕ
			|	ИнформационныеКарты.КодКарты = &КодКарты";
		
		Запрос.УстановитьПараметр("КодКарты", МагнитныйКод);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;

	Если ЗначениеЗаполнено(Штрихкод) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Штрихкоды.Владелец КАК ИнфКарта
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &Штрихкод";
		
		Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.ИнфКарта;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиОрганизацию(Узел, ВнешняяСистема) Экспорт
	
	Организация = Неопределено;
	гуид = "";
	Если узел.Свойство("Ref", гуид) Тогда
		Организация = РегистрыСведений.ксп_МэппингСправочникОрганизации.ПоМэппингу(гуид, ВнешняяСистема);
		Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(Организация.ВерсияДанных) Тогда
			Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(гуид));
		КонецЕсли;
	КонецЕсли;
		
	Возврат Организация;
	
КонецФункции

Функция НайтиКонтрагента(Узел, ВнешняяСистема) Экспорт
	
	Контрагент = Неопределено;
	ГУИД = "";
	Если узел.Свойство("Ref", ГУИД) Тогда
		Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиГруппуФинансовогоУчета (Узел, ВнешняяСистема) Экспорт
		
	ГруппаФинансовогоУчета = Неопределено;
	ГУИД = "";
	Если узел.Свойство("Ref", ГУИД) Тогда
		ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиДоговор(УзелДоговора, УзелКонтрагента = Неопределено, КонтрагентСсылка = Неопределено) Экспорт

	Рез = Неопределено;
	ГУИД = "";
	Если УзелДоговора.Свойство("Ref", ГУИД) Тогда
		Рез = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	КонецЕсли;
	
	Возврат Рез;
		
КонецФункции

Функция НайтиНазначение(Узел, ВнешняяСистема) Экспорт

	Назначение = Неопределено;
	ГУИД = "";
	Если Узел.Свойство("Ref", ГУИД) Тогда
		Назначение = Справочники.Назначения.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	КонецЕсли;
	
	Возврат Назначение;
		
КонецФункции

Функция НайтиПодразделение(Узел, ВнешняяСистема) Экспорт

	Подразделение = Неопределено;
	ГУИД = "";
	Если Узел.Свойство("Ref", ГУИД) Тогда
		Подразделение = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	КонецЕсли;
	
	Возврат Подразделение;
		
КонецФункции

Функция НайтиСкидкуНаценку(Узел, ВнешняяСистема) Экспорт

	СкидкаНаценка = Неопределено;
	ГУИД = "";
	Если Узел.Свойство("Ref", ГУИД) Тогда
		СкидкаНаценка = Справочники.СкидкиНаценки.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	КонецЕсли;
	
	Возврат СкидкаНаценка;
		
КонецФункции

Функция НайтиБонуснуюПрограммуЛояльности(Узел, ВнешняяСистема) Экспорт

	БонуснаяПрограмма = Неопределено;
	ГУИД = "";
	Если Узел.Свойство("Ref", ГУИД) Тогда
		БонуснаяПрограмма = Справочники.БонусныеПрограммыЛояльности.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	КонецЕсли;
	
	Возврат БонуснаяПрограмма;
		
КонецФункции

Функция НайтиХарактеристику(УзелХарактеристики) Экспорт
	
	ХарактеристикаГУИД = "";
	Если УзелХарактеристики.Свойство("Ref", ХарактеристикаГУИД) Тогда
		Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ХарактеристикаГУИД));
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

Функция НайтиЕдиницуИзмерения(УзелЕдиницы, УзелНоменклатуры = Неопределено) Экспорт
	
	Наименование = "";
	УзелЕдиницы.Свойство("Наименование", Наименование);
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Владелец = "";
	УзелЕдиницы.Свойство("Owner", Владелец);
	
	Если (НЕ ЗначениеЗаполнено(Владелец)) 
		ИЛИ
		(Владелец.type = "Справочник.НаборыУпаковок"
		И
		Владелец.Predefined = true
		И
		Владелец.PredefinedName = "БазовыеЕдиницыИзмерения")
		Тогда
		Возврат Справочники.БазовыеЕдиницыИзмерения.НайтиПоНаименованию(УзелЕдиницы.Наименование, Истина);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Владелец) И Владелец.type = "Справочник.Номенклатура" Тогда
		
		Если ЗначениеЗаполнено(УзелНоменклатуры) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	УпаковкиНоменклатуры.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
				|ГДЕ
				|	УпаковкиНоменклатуры.Наименование = &Наименование
				|	И УпаковкиНоменклатуры.Владелец = &Владелец";
			
			//через имя общ модуля, чтобы ПИ работало
			Владелец = ксп_ИмпортСлужебный.НайтиНоменклатуру(УзелНоменклатуры);
			
			Запрос.УстановитьПараметр("Владелец", Владелец);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Возврат ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
		КонецЕсли;	
		
	КонецЕсли;
	
		
	Возврат Неопределено;
	
КонецФункции

Функция НайтиАналитикуУчетаНоменклатуры(Узел) Экспорт
	
	АналитикаУчетаНоменклатурыГУИД = "";
	Если Узел.Свойство("Ref", АналитикаУчетаНоменклатурыГУИД) Тогда
		Возврат Справочники.КлючиАналитикиУчетаНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(АналитикаУчетаНоменклатурыГУИД));
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции





